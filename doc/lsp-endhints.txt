*lsp-endhints.txt* Auto-generated from README.md. Do not make PRs to this file.

==============================================================================
Table of Contents                             *lsp-endhints-table-of-contents*

1. nvim-lsp-endhints                         |lsp-endhints-nvim-lsp-endhints-|
  - Table of Contents      |lsp-endhints-nvim-lsp-endhints--table-of-contents|
  - Installation                |lsp-endhints-nvim-lsp-endhints--installation|
  - Configuration              |lsp-endhints-nvim-lsp-endhints--configuration|
  - Usage                              |lsp-endhints-nvim-lsp-endhints--usage|
  - Background                    |lsp-endhints-nvim-lsp-endhints--background|
  - FAQ                                  |lsp-endhints-nvim-lsp-endhints--faq|
  - About the author        |lsp-endhints-nvim-lsp-endhints--about-the-author|

==============================================================================
1. nvim-lsp-endhints                         *lsp-endhints-nvim-lsp-endhints-*



Minimalplugin that displays LSP inlay hints at the end of the line, rather than
within the line.



_Color scheme: nightfox.nvim, dawnfox variant_


TABLE OF CONTENTS          *lsp-endhints-nvim-lsp-endhints--table-of-contents*

- |lsp-endhints-installation|
- |lsp-endhints-configuration|
- |lsp-endhints-usage|
- |lsp-endhints-background|
- |lsp-endhints-faq|
    - |lsp-endhints-how-to-display-hints-only-for-the-current-line?|
    - |lsp-endhints-how-to-enable-inlay-hints-for-a-language?|
- |lsp-endhints-about-the-author|


INSTALLATION                    *lsp-endhints-nvim-lsp-endhints--installation*

**Requirements** - nvim >= 0.10 - LSP client that supports inlay hints
(`textDocument/inlayHint`) - Inlay hints enabled in the config of the LSP

>lua
    -- lazy.nvim
    {
        "chrisgrieser/nvim-lsp-endhints",
        event = "LspAttach",
        opts = {}, -- required, even if empty
    },

    -- packer
    use {
        "chrisgrieser/nvim-lsp-endhints",
    }
<


CONFIGURATION                  *lsp-endhints-nvim-lsp-endhints--configuration*

The `.setup()` call is required.

>lua
    -- default settings
    require("lsp-endhints").setup {
        icons = {
            enabled = true,
            type = "󰜁 ",
            parameter = "󰏪 ",
            offspec = " ", -- hint kind not defined in official LSP spec
            unknown = " ", -- hint kind is nil
        },
        label = {
            padding = 1,
            marginLeft = 0,
            bracketedParameters = true,
        },
        autoEnableHints = true,
    }
<

The hints use the default highlight group `LspInlayHint`.


USAGE                                  *lsp-endhints-nvim-lsp-endhints--usage*

By default, the plugin automatically enables inlay hints when attaching to an
LSP, there is nothing to do other than loading the plugin.

All regular inlay hint functions like `vim.lsp.inlay_hint.enable()` work the
same as before. Use them |as described in the Neovim documentation| to
enable/disable/toggle hints manually.

You can switch between displaying inlay hints at the end of the line (this
plugin) and within the line (neovim default) by using the `enable`, `disable`
and `toggle` functions:

>lua
    -- inlay hints will show at the end of the line (default)
    require("lsp-endhints").enable()

    -- inlay hints will show as if the plugin was not installed
    require("lsp-endhints").disable()

    -- toggle between the two
    require("lsp-endhints").toggle()
<


BACKGROUND                        *lsp-endhints-nvim-lsp-endhints--background*

- The LSP specification stipulates that inlay hints have a fixed position in
    the line, which Neovim core follows. <https://github.com/neovim/neovim/issues/28261#issuecomment-2194659088>
- However, for many people, hints being positioned within the line disturbs the
    flow of vim motions. This is particularly troublesome for languages with long
    type hints, such as TypeScript.
- nvim-inlayhint <https://github.com/lvimuser/lsp-inlayhints.nvim> did pretty
    much the same thing for nvim < 0.10, but it is archived by now. Other than
    being maintained, `nvim-lsp-endhints` just overrides the
    `textDocument/inlayHint` handler introduced in nvim 0.10, resulting in a much
    simpler and more maintainable implementation (~250 LoC instead of ~1000 LoC).


FAQ                                      *lsp-endhints-nvim-lsp-endhints--faq*


HOW TO DISPLAY HINTS ONLY FOR THE CURRENT LINE? ~

That is not supported by the plugin. However, it only takes a small snippet to
implement it yourself.
<https://github.com/neovim/neovim/issues/28261#issuecomment-2130338921> (Note
that the linked snippet is not compatible with this plugin.)


HOW TO ENABLE INLAY HINTS FOR A LANGUAGE? ~


  [!NOTE] Not all LSPs support inlay hints. The following list is not exhaustive,
  there are more LSPs that support inlay hints. Please refer to your LSP’s
  documentation.
>lua
    -- lua-ls
    require("lspconfig").lua_ls.setup {
        settings = {
            Lua = {
                hint = { enable = true },
            },
        },
    }

    -- tsserver
    local inlayHints = {
        includeInlayParameterNameHints = "all",
        includeInlayParameterNameHintsWhenArgumentMatchesName = false,
        includeInlayFunctionParameterTypeHints = true,
        includeInlayVariableTypeHints = true,
        includeInlayVariableTypeHintsWhenTypeMatchesName = false,
        includeInlayPropertyDeclarationTypeHints = true,
        includeInlayFunctionLikeReturnTypeHints = true,
        includeInlayEnumMemberValueHints = true,
    }
    require("lspconfig").tsserver.setup {
        settings = {
            typescript = {
                inlayHints = inlayHints,
            },
            javascript = {
                inlayHints = inlayHints,
            },
        },
    }

    -- gopls
    require("lspconfig").gopls.setup {
        settings = {
            hints = {
                rangeVariableTypes = true,
                parameterNames = true,
                constantValues = true,
                assignVariableTypes = true,
                compositeLiteralFields = true,
                compositeLiteralTypes = true,
                functionTypeParameters = true,
            },
        },
    }

    -- clangd
    require("lspconfig").clangd.setup {
        settings = {
            clangd = {
                InlayHints = {
                    Designators = true,
                    Enabled = true,
                    ParameterNames = true,
                    DeducedTypes = true,
                },
                fallbackFlags = { "-std=c++20" },
            },
        },
    }
<


ABOUT THE AUTHOR            *lsp-endhints-nvim-lsp-endhints--about-the-author*

In my day job, I am a sociologist studying the social mechanisms underlying the
digital economy. For my PhD project, I investigate the governance of the app
economy and how software ecosystems manage the tension between innovation and
compatibility. If you are interested in this subject, feel free to get in
touch.

I also occasionally blog about vim: Nano Tips for Vim
<https://nanotipsforvim.prose.sh>

- Academic Website <https://chris-grieser.de/>
- Mastodon <https://pkm.social/@pseudometa>
- ResearchGate <https://www.researchgate.net/profile/Christopher-Grieser>
- LinkedIn <https://www.linkedin.com/in/christopher-grieser-ba693b17a/>



Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
